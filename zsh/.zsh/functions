function mcd () { mkdir -p "$@" && eval cd "\"\$$#\""; }

function extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2) tar xvjf $1   ;;
      *.tar.gz)  tar xvzf $1   ;;
      *.tar.xz)  tar xvfJ $1   ;;
      *.bz2)     bunzip2 $1    ;;
      *.rar)     unrar x $1    ;;
      *.gz)      gunzip $1     ;;
      *.tar)     tar xvf $1    ;;
      *.tbz2)    tar xvjf $1   ;;
      *.tgz)     tar xvzf $1   ;;
      *.zip)     unzip $1      ;;
      *.Z)       uncompress $1 ;;
      *.7z)      7z x $1       ;;
      *)         echo "'$1' cannot be extracted via >extract<" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

function aws_login {
    unset AWS_SECURITY_TOKEN AWS_SESSION_TOKEN
    credentials=$(security find-generic-password -s "aws-vault" -w ~/Library/Keychains/aws-vault.keychain-db | jq -r '.AccessKeyID, .SecretAccessKey')
    export AWS_ACCESS_KEY_ID=$(echo "$credentials" | sed -n '1p')
    export AWS_SECRET_ACCESS_KEY=$(echo "$credentials" | sed -n '2p')
    unset credentials
}

function aws_logout {
    unset AWS_SECURITY_TOKEN
    unset AWS_SESSION_TOKEN
    unset AWS_ACCESS_KEY_ID
    unset AWS_SECRET_ACCESS_KEY
}

realpath() {
    if [ $# -eq 0 ]; then
        printf '%s\n' "$PWD" | tee >(pbcopy)
    else
        printf '%s\n' "$PWD/${1:-.##*/}" | tee >(pbcopy)
    fi
}

export_legacy_brew_package() {
    local package="$1"
    local package_path="/usr/local/Cellar/$package"

    # Check if the package directory exists
    if [[ ! -d "$package_path" ]]; then
        echo "Error: Package '$package' not found in $package_path" >&2
        return 1
    fi

    # Get the latest version of the package
    local latest_version
    latest_version=$(ls -1 "$package_path" | sort -rV | head -n 1)

    # Ensure a valid version exists
    if [[ -z "$latest_version" ]]; then
        echo "Error: No versions found for package '$package'" >&2
        return 1
    fi

    # Construct both possible paths
    local bin_path="$package_path/$latest_version/bin"
    local sbin_path="$package_path/$latest_version/sbin"

    # Check sbin first, then bin, and export directly
    if [[ -d "$sbin_path" ]]; then
        export PATH="${sbin_path}:${PATH}"
        echo "Added ${sbin_path} to PATH"
    elif [[ -d "$bin_path" ]]; then
        export PATH="${bin_path}:${PATH}"
        echo "Added ${bin_path} to PATH"
    else
        echo "Warning: Neither '${bin_path}' nor '${sbin_path}' exists" >&2
    fi
}
